{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import dependencies\n",
    "from lxml import etree as ET, objectify\n",
    "from os import listdir\n",
    "from os.path import isfile, join, dirname\n",
    "import pandas as pd\n",
    "from collections import OrderedDict\n",
    "from datetime import date\n",
    "import json\n",
    "from glob import glob\n",
    "import fnmatch\n",
    "from pathlib import Path\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create DF from trackpoints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"activity_5618003227.tcx\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "parser = ET.XMLParser(remove_blank_text=True)\n",
    "tree = ET.parse(filepath, parser)\n",
    "root = tree.getroot()\n",
    "\n",
    "for child in root.getiterator():\n",
    "    if not hasattr(child.tag, 'find'): continue  # (1)\n",
    "    i = child.tag.find('}')\n",
    "    if i >= 0:\n",
    "        child.tag = child.tag[i + 1:]\n",
    "objectify.deannotate(root, cleanup_namespaces=True)\n",
    "\n",
    "trackpoints = [{\n",
    "'HR': tp.findtext('HeartRateBpm/Value'),\n",
    "'Time': tp.findtext('Time'),\n",
    "'Speed': tp.findtext('Extensions/TPX/Speed'),\n",
    "'Cadence': tp.findtext('Extensions/TPX/RunCadence'),\n",
    "'Lat': tp.findtext('Position/LatitudeDegrees'),\n",
    "'Lon': tp.findtext('Position/LongitudeDegrees'),\n",
    "'Alt': tp.findtext('AltitudeMeters'),\n",
    "'Distance': tp.findtext('DistanceMeters')\n",
    "}\n",
    "for tp in tree.xpath('//Track/Trackpoint')]\n",
    "\n",
    "trackpt_df = pd.DataFrame(trackpoints)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HR</th>\n",
       "      <th>Time</th>\n",
       "      <th>Speed</th>\n",
       "      <th>Cadence</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>Alt</th>\n",
       "      <th>Distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>104</td>\n",
       "      <td>2020-10-01T16:21:43.000Z</td>\n",
       "      <td>1.465000033378601</td>\n",
       "      <td>61</td>\n",
       "      <td>39.072621166706085</td>\n",
       "      <td>-108.55783620849252</td>\n",
       "      <td>1409.199951171875</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>104</td>\n",
       "      <td>2020-10-01T16:21:44.000Z</td>\n",
       "      <td>1.4459999799728394</td>\n",
       "      <td>61</td>\n",
       "      <td>39.07264337874949</td>\n",
       "      <td>-108.55783872306347</td>\n",
       "      <td>1409.199951171875</td>\n",
       "      <td>1.3600000143051147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>104</td>\n",
       "      <td>2020-10-01T16:21:48.000Z</td>\n",
       "      <td>2.3510000705718994</td>\n",
       "      <td>15</td>\n",
       "      <td>39.072762317955494</td>\n",
       "      <td>-108.55783176608384</td>\n",
       "      <td>1410.199951171875</td>\n",
       "      <td>11.449999809265137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>104</td>\n",
       "      <td>2020-10-01T16:21:49.000Z</td>\n",
       "      <td>2.4260001182556152</td>\n",
       "      <td>83</td>\n",
       "      <td>39.07279375009239</td>\n",
       "      <td>-108.55783503502607</td>\n",
       "      <td>1409.4000244140625</td>\n",
       "      <td>14.949999809265137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>105</td>\n",
       "      <td>2020-10-01T16:21:55.000Z</td>\n",
       "      <td>3.2660000324249268</td>\n",
       "      <td>83</td>\n",
       "      <td>39.072956359013915</td>\n",
       "      <td>-108.5578356217593</td>\n",
       "      <td>1409.5999755859375</td>\n",
       "      <td>35.119998931884766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>171</td>\n",
       "      <td>2020-10-01T16:50:23.000Z</td>\n",
       "      <td>2.76200008392334</td>\n",
       "      <td>80</td>\n",
       "      <td>39.07328903675079</td>\n",
       "      <td>-108.55507453903556</td>\n",
       "      <td>1415.4000244140625</td>\n",
       "      <td>4828.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>171</td>\n",
       "      <td>2020-10-01T16:50:25.000Z</td>\n",
       "      <td>2.753000020980835</td>\n",
       "      <td>80</td>\n",
       "      <td>39.07328451052308</td>\n",
       "      <td>-108.55514788068831</td>\n",
       "      <td>1415.4000244140625</td>\n",
       "      <td>4834.06005859375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>170</td>\n",
       "      <td>2020-10-01T16:50:27.000Z</td>\n",
       "      <td>2.753000020980835</td>\n",
       "      <td>80</td>\n",
       "      <td>39.073282331228256</td>\n",
       "      <td>-108.5552073083818</td>\n",
       "      <td>1415.4000244140625</td>\n",
       "      <td>4839.97998046875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>172</td>\n",
       "      <td>2020-10-01T16:50:31.000Z</td>\n",
       "      <td>2.6589999198913574</td>\n",
       "      <td>80</td>\n",
       "      <td>39.07328702509403</td>\n",
       "      <td>-108.55530152097344</td>\n",
       "      <td>1415.199951171875</td>\n",
       "      <td>4847.02001953125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>172</td>\n",
       "      <td>2020-10-01T16:50:34.000Z</td>\n",
       "      <td>1.8940000534057617</td>\n",
       "      <td>0</td>\n",
       "      <td>39.073272943496704</td>\n",
       "      <td>-108.55527880601585</td>\n",
       "      <td>1415.0</td>\n",
       "      <td>4851.31005859375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>406 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      HR                      Time               Speed Cadence  \\\n",
       "0    104  2020-10-01T16:21:43.000Z   1.465000033378601      61   \n",
       "1    104  2020-10-01T16:21:44.000Z  1.4459999799728394      61   \n",
       "2    104  2020-10-01T16:21:48.000Z  2.3510000705718994      15   \n",
       "3    104  2020-10-01T16:21:49.000Z  2.4260001182556152      83   \n",
       "4    105  2020-10-01T16:21:55.000Z  3.2660000324249268      83   \n",
       "..   ...                       ...                 ...     ...   \n",
       "401  171  2020-10-01T16:50:23.000Z    2.76200008392334      80   \n",
       "402  171  2020-10-01T16:50:25.000Z   2.753000020980835      80   \n",
       "403  170  2020-10-01T16:50:27.000Z   2.753000020980835      80   \n",
       "404  172  2020-10-01T16:50:31.000Z  2.6589999198913574      80   \n",
       "405  172  2020-10-01T16:50:34.000Z  1.8940000534057617       0   \n",
       "\n",
       "                    Lat                  Lon                 Alt  \\\n",
       "0    39.072621166706085  -108.55783620849252   1409.199951171875   \n",
       "1     39.07264337874949  -108.55783872306347   1409.199951171875   \n",
       "2    39.072762317955494  -108.55783176608384   1410.199951171875   \n",
       "3     39.07279375009239  -108.55783503502607  1409.4000244140625   \n",
       "4    39.072956359013915   -108.5578356217593  1409.5999755859375   \n",
       "..                  ...                  ...                 ...   \n",
       "401   39.07328903675079  -108.55507453903556  1415.4000244140625   \n",
       "402   39.07328451052308  -108.55514788068831  1415.4000244140625   \n",
       "403  39.073282331228256   -108.5552073083818  1415.4000244140625   \n",
       "404   39.07328702509403  -108.55530152097344   1415.199951171875   \n",
       "405  39.073272943496704  -108.55527880601585              1415.0   \n",
       "\n",
       "               Distance  \n",
       "0                   0.0  \n",
       "1    1.3600000143051147  \n",
       "2    11.449999809265137  \n",
       "3    14.949999809265137  \n",
       "4    35.119998931884766  \n",
       "..                  ...  \n",
       "401              4828.5  \n",
       "402    4834.06005859375  \n",
       "403    4839.97998046875  \n",
       "404    4847.02001953125  \n",
       "405    4851.31005859375  \n",
       "\n",
       "[406 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trackpt_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iterate all tcx files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'activity_id': '1926552470', 'activity_type': 'biking', 'duration': 13148.0, 'total_distance': 78734.03125, 'distance_units': 'meters', 'calories': 2255}\n",
      "{'activity_id': '1926552470', 'hrt_rate': '97', 'activity_time': '2017-08-19T20:38:57.000Z', 'speed': '0.0', 'cadence': None, 'lat': '39.464005418121815', 'lon': '-107.3228301666677', 'altitude': '1972.5999755859375', 'distance': '0.8500000238418579'}\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tcxparser\n",
    "\n",
    "for subdir, dirs, files in os.walk(r'/Users/loganbon/Documents/GitHub/Projects/School Projects/Digital Workout Tracker/Digital-Workout-Tracker/data/tcx'):\n",
    "    for filename in files:\n",
    "        filepath = subdir + os.sep + filename\n",
    "        with open(filepath):\n",
    "            # Parse tcx file \n",
    "            parser = ET.XMLParser(remove_blank_text=True)\n",
    "            tree = ET.parse(filepath, parser)\n",
    "            root = tree.getroot()\n",
    "            for child in root.getiterator():\n",
    "                if not hasattr(child.tag, 'find'): continue  # (1)\n",
    "                i = child.tag.find('}')\n",
    "                if i >= 0:\n",
    "                    child.tag = child.tag[i + 1:]\n",
    "            objectify.deannotate(root, cleanup_namespaces=True)\n",
    "            \n",
    "            # Get activity id from file name\n",
    "            activity_id = filepath.split(\"_\")[1]\n",
    "            \n",
    "            # Get trackpoints data\n",
    "            trackpoints = [{\n",
    "            'activity_id': activity_id,\n",
    "            'hrt_rate': tp.findtext('HeartRateBpm/Value'),\n",
    "            'activity_time': tp.findtext('Time'),\n",
    "            'speed': tp.findtext('Extensions/TPX/Speed'),\n",
    "            'cadence': tp.findtext('Extensions/TPX/RunCadence'),\n",
    "            'lat': tp.findtext('Position/LatitudeDegrees'),\n",
    "            'lon': tp.findtext('Position/LongitudeDegrees'),\n",
    "            'altitude': tp.findtext('AltitudeMeters'),\n",
    "            'distance': tp.findtext('DistanceMeters')\n",
    "            }\n",
    "            for tp in tree.xpath('//Track/Trackpoint')]\n",
    "            \n",
    "            # Get activity summary data\n",
    "            tcx = tcxparser.TCXParser(filepath)\n",
    "            activities = {\n",
    "                \"activity_id\": activity_id,\n",
    "                \"activity_type\": tcx.activity_type,\n",
    "                \"duration\": tcx.duration,\n",
    "                \"total_distance\": tcx.distance,\n",
    "                \"distance_units\": tcx.distance_units,\n",
    "#                 \"avg_hrt_rate\": tcx.hr_avg,    # return ZeroDivisionError\n",
    "#                 \"max_hrt_rate\": tcx.hr_max,    # return ZeroDivisionError\n",
    "                \"calories\": tcx.calories\n",
    "            }\n",
    "            print(activities)\n",
    "            print(trackpoints[0])\n",
    "            break"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
